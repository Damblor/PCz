%Piotr Krupa
%Dane
w_a1 = [-5,5];
w_a2 = [-3,1];
w_a3 = [1,2];

%Macierz wezlow
w_a = [w_a1;w_a2;w_a3];

%Baza wielomianu Lagrange'a
fi_a = zeros(1,6);

for i=1:3
  fi_a(i)=1;
  for j=1:3
    if i != j
    fi_a(i)*=(w_a(i,1)-w_a(j,1));
    endif
  endfor
endfor

%Wspolczynniki wielomianu Lagrange'a
a = zeros(1,3);
for i = 1:3
 a(i) = w_a(i,2) / fi_a(i);
endfor

% Wyznaczenie ogolnego wzoru wielomianu
wsp_a = zeros(1,3);
wsp_a(1) = a(1)*w_a(2,1)*w_a(3,1)+a(2)*w_a(1,1)*w_a(3,1)+a(3)*w_a(1,1)*w_a(2,1);
wsp_a(2) = -a(1)*(w_a(2,1)+w_a(3,1))-a(2)*(w_a(1,1)+w_a(3,1))-a(3)*(w_a(1,1)+w_a(2,1));
wsp_a(3) = a(1)+a(2)+a(3);
fprintf("W(x) = %f x^2 + %f x + %f\n", wsp_a(3),wsp_a(2),wsp_a(1));


x = [-5:0.5:5];
y = zeros(1,21);
for i=1:3
  y+=wsp_a(i)*x.^(i-1);
endfor
plot(x,y);
grid on;
hold on;

vector_x=[w_a(1,1),w_a(2,1),w_a(3,1)];
vector_y=[0,0,0];
for i=1:3
 for j=1:3
 vector_y(1,j) = vector_y(1,j)+wsp_a(i)*w_a(j,1)^(i-1);
 endfor
endfor
plot(vector_x,vector_y,'rx');

for i=1:3
 plot(w_a(i,1),w_a(i,2),'--gs');
endfor


%//////////////////////////////////////////////////////////////
%Dane
w_b1 = [-5,5];
w_b2 = [-3,1];
w_b3 = [1,2];
w_b4 = [2,-1];
w_b5 = [-2,4];
w_b6 = [4,-1];

%Macierz wezlow
w_b = [w_b1;w_b2;w_b3;w_b4;w_b5;w_b6];

%Baza wielomianu Lagrange'a
fi_b = zeros(1,6);

for i=1:6
  fi_b(i)=1;
  for j=1:6
    if i != j
    fi_b(i)*=(w_b(i,1)-w_b(j,1));
    endif
  endfor
endfor

%Wspolczynniki wielomianu Lagrange'a
b = zeros(1,6);
for i = 1:6
 b(i) = w_b(i,2) / fi_b(i);
endfor

% Wyznaczenie ogolnego wzoru wielomianu
wsp_b = zeros(1,6);
wsp_b(1) = -b(1)*(w_b(2,1)*w_b(3,1)*w_b(4,1)*w_b(5,1)*w_b(6,1))-b(2)*(w_b(1,1)*w_b(3,1)*w_b(4,1)*w_b(5,1)*w_b(6,1))-b(3)*(w_b(2,1)*w_b(1,1)*w_b(4,1)*w_b(5,1)*w_b(6,1))-b(4)*(w_b(2,1)*w_b(3,1)*w_b(1,1)*w_b(5,1)*w_b(6,1))-b(5)*(w_b(2,1)*w_b(3,1)*w_b(4,1)*w_b(1,1)*w_b(6,1))-b(6)*(w_b(2,1)*w_b(3,1)*w_b(4,1)*w_b(5,1)*w_b(1,1));
wsp_b(2) = b(1)*((w_b(2,1)*w_b(3,1)*w_b(4,1)*w_b(5,1)) + (w_b(2,1)*w_b(3,1)*w_b(4,1)*w_b(6,1)) + (w_b(2,1)*w_b(3,1)*w_b(5,1)*w_b(6,1)) + (w_b(2,1)*w_b(4,1)*w_b(5,1)*w_b(6,1)) + (w_b(3,1)*w_b(4,1)*w_b(5,1)*w_b(6,1)))+b(2)*((w_b(1,1)*w_b(3,1)*w_b(4,1)*w_b(5,1)) + (w_b(1,1)*w_b(3,1)*w_b(4,1)*w_b(6,1)) + (w_b(1,1)*w_b(3,1)*w_b(5,1)*w_b(6,1)) + (w_b(1,1)*w_b(4,1)*w_b(5,1)*w_b(6,1)) + (w_b(3,1)*w_b(4,1)*w_b(5,1)*w_b(6,1)))+b(3)*((w_b(2,1)*w_b(1,1)*w_b(4,1)*w_b(5,1)) + (w_b(2,1)*w_b(1,1)*w_b(4,1)*w_b(6,1)) + (w_b(2,1)*w_b(1,1)*w_b(5,1)*w_b(6,1)) + (w_b(2,1)*w_b(4,1)*w_b(5,1)*w_b(6,1)) + (w_b(1,1)*w_b(4,1)*w_b(5,1)*w_b(6,1)))+b(4)*((w_b(2,1)*w_b(3,1)*w_b(1,1)*w_b(5,1)) + (w_b(2,1)*w_b(3,1)*w_b(1,1)*w_b(6,1)) + (w_b(2,1)*w_b(3,1)*w_b(5,1)*w_b(6,1)) + (w_b(2,1)*w_b(1,1)*w_b(5,1)*w_b(6,1)) + (w_b(3,1)*w_b(1,1)*w_b(5,1)*w_b(6,1)))+b(5)*((w_b(2,1)*w_b(3,1)*w_b(4,1)*w_b(1,1)) + (w_b(2,1)*w_b(3,1)*w_b(4,1)*w_b(6,1)) + (w_b(2,1)*w_b(3,1)*w_b(1,1)*w_b(6,1)) + (w_b(2,1)*w_b(4,1)*w_b(1,1)*w_b(6,1)) + (w_b(3,1)*w_b(4,1)*w_b(1,1)*w_b(6,1)))+b(6)*((w_b(2,1)*w_b(3,1)*w_b(4,1)*w_b(5,1)) + (w_b(2,1)*w_b(3,1)*w_b(4,1)*w_b(1,1)) + (w_b(2,1)*w_b(3,1)*w_b(5,1)*w_b(1,1)) + (w_b(2,1)*w_b(4,1)*w_b(5,1)*w_b(1,1)) + (w_b(3,1)*w_b(4,1)*w_b(5,1)*w_b(1,1)));
wsp_b(3) = -b(1)*((w_b(2,1)*w_b(3,1)*w_b(4,1)) + (w_b(2,1)*w_b(3,1)*w_b(6,1)) + (w_b(2,1)*w_b(4,1)*w_b(5,1)) + (w_b(2,1)*w_b(4,1)*w_b(6,1)) + (w_b(2,1)*w_b(5,1)*w_b(6,1)) + (w_b(3,1)*w_b(4,1)*w_b(5,1)) + (w_b(3,1)*w_b(4,1)*w_b(6,1)) + (w_b(3,1)*w_b(5,1)*w_b(6,1)) + (w_b(4,1)*w_b(5,1)*w_b(6,1)) + (w_b(2,1)*w_b(3,1)*w_b(5,1)))-b(2)*((w_b(1,1)*w_b(3,1)*w_b(4,1)) + (w_b(1,1)*w_b(3,1)*w_b(6,1)) + (w_b(1,1)*w_b(4,1)*w_b(5,1)) + (w_b(1,1)*w_b(4,1)*w_b(6,1)) + (w_b(1,1)*w_b(5,1)*w_b(6,1)) + (w_b(3,1)*w_b(4,1)*w_b(5,1)) + (w_b(3,1)*w_b(4,1)*w_b(6,1)) + (w_b(3,1)*w_b(5,1)*w_b(6,1)) + (w_b(4,1)*w_b(5,1)*w_b(6,1)) + (w_b(1,1)*w_b(3,1)*w_b(5,1)))-b(3)*((w_b(2,1)*w_b(1,1)*w_b(4,1)) + (w_b(2,1)*w_b(1,1)*w_b(6,1)) + (w_b(2,1)*w_b(4,1)*w_b(5,1)) + (w_b(2,1)*w_b(4,1)*w_b(6,1)) + (w_b(2,1)*w_b(5,1)*w_b(6,1)) + (w_b(1,1)*w_b(4,1)*w_b(5,1)) + (w_b(1,1)*w_b(4,1)*w_b(6,1)) + (w_b(1,1)*w_b(5,1)*w_b(6,1)) + (w_b(4,1)*w_b(5,1)*w_b(6,1)) + (w_b(2,1)*w_b(1,1)*w_b(5,1)))-b(4)*((w_b(2,1)*w_b(3,1)*w_b(1,1)) + (w_b(2,1)*w_b(3,1)*w_b(6,1)) + (w_b(2,1)*w_b(1,1)*w_b(5,1)) + (w_b(2,1)*w_b(1,1)*w_b(6,1)) + (w_b(2,1)*w_b(5,1)*w_b(6,1)) + (w_b(3,1)*w_b(1,1)*w_b(5,1)) + (w_b(3,1)*w_b(1,1)*w_b(6,1)) + (w_b(3,1)*w_b(5,1)*w_b(6,1)) + (w_b(1,1)*w_b(5,1)*w_b(6,1)) + (w_b(2,1)*w_b(3,1)*w_b(5,1)))-b(5)*((w_b(2,1)*w_b(3,1)*w_b(4,1)) + (w_b(2,1)*w_b(3,1)*w_b(6,1)) + (w_b(2,1)*w_b(4,1)*w_b(1,1)) + (w_b(2,1)*w_b(4,1)*w_b(6,1)) + (w_b(2,1)*w_b(1,1)*w_b(6,1)) + (w_b(3,1)*w_b(4,1)*w_b(1,1)) + (w_b(3,1)*w_b(4,1)*w_b(6,1)) + (w_b(3,1)*w_b(1,1)*w_b(6,1)) + (w_b(4,1)*w_b(1,1)*w_b(6,1)) + (w_b(2,1)*w_b(3,1)*w_b(1,1)))-b(6)*((w_b(2,1)*w_b(3,1)*w_b(4,1)) + (w_b(2,1)*w_b(3,1)*w_b(1,1)) + (w_b(2,1)*w_b(4,1)*w_b(5,1)) + (w_b(2,1)*w_b(4,1)*w_b(1,1)) + (w_b(2,1)*w_b(5,1)*w_b(1,1)) + (w_b(3,1)*w_b(4,1)*w_b(5,1)) + (w_b(3,1)*w_b(4,1)*w_b(1,1)) + (w_b(3,1)*w_b(5,1)*w_b(1,1)) + (w_b(4,1)*w_b(5,1)*w_b(1,1)) + (w_b(2,1)*w_b(3,1)*w_b(5,1)));
wsp_b(4) = b(1)*((w_b(2,1)*w_b(3,1)) + (w_b(2,1)*w_b(4,1)) + (w_b(2,1)*w_b(5,1)) + (w_b(2,1)*w_b(6,1)) + (w_b(3,1)*w_b(4,1)) + (w_b(3,1)*w_b(5,1)) + (w_b(3,1)*w_b(6,1)) + (w_b(4,1)*w_b(5,1)) + (w_b(4,1)*w_b(6,1)) + (w_b(5,1)*w_b(6,1)))+b(2)*((w_b(1,1)*w_b(3,1)) + (w_b(1,1)*w_b(4,1)) + (w_b(1,1)*w_b(5,1)) + (w_b(1,1)*w_b(6,1)) + (w_b(3,1)*w_b(4,1)) + (w_b(3,1)*w_b(5,1)) + (w_b(3,1)*w_b(6,1)) + (w_b(4,1)*w_b(5,1)) + (w_b(4,1)*w_b(6,1)) + (w_b(5,1)*w_b(6,1)))+b(3)*((w_b(2,1)*w_b(1,1)) + (w_b(2,1)*w_b(4,1)) + (w_b(2,1)*w_b(5,1)) + (w_b(2,1)*w_b(6,1)) + (w_b(1,1)*w_b(4,1)) + (w_b(1,1)*w_b(5,1)) + (w_b(1,1)*w_b(6,1)) + (w_b(4,1)*w_b(5,1)) + (w_b(4,1)*w_b(6,1)) + (w_b(5,1)*w_b(6,1)))+b(4)*((w_b(2,1)*w_b(3,1)) + (w_b(2,1)*w_b(1,1)) + (w_b(2,1)*w_b(5,1)) + (w_b(2,1)*w_b(6,1)) + (w_b(3,1)*w_b(1,1)) + (w_b(3,1)*w_b(5,1)) + (w_b(3,1)*w_b(6,1)) + (w_b(1,1)*w_b(5,1)) + (w_b(1,1)*w_b(6,1)) + (w_b(5,1)*w_b(6,1)))+b(5)*((w_b(2,1)*w_b(3,1)) + (w_b(2,1)*w_b(4,1)) + (w_b(2,1)*w_b(1,1)) + (w_b(2,1)*w_b(6,1)) + (w_b(3,1)*w_b(4,1)) + (w_b(3,1)*w_b(1,1)) + (w_b(3,1)*w_b(6,1)) + (w_b(4,1)*w_b(1,1)) + (w_b(4,1)*w_b(6,1)) + (w_b(1,1)*w_b(6,1)))+b(6)*((w_b(2,1)*w_b(3,1)) + (w_b(2,1)*w_b(4,1)) + (w_b(2,1)*w_b(5,1)) + (w_b(2,1)*w_b(1,1)) + (w_b(3,1)*w_b(4,1)) + (w_b(3,1)*w_b(5,1)) + (w_b(3,1)*w_b(1,1)) + (w_b(4,1)*w_b(5,1)) + (w_b(4,1)*w_b(1,1)) + (w_b(5,1)*w_b(1,1)));
wsp_b(5) = -b(1)*(w_b(2,1) + w_b(3,1) + w_b(4,1) + w_b(5,1) + w_b(6,1))-b(2)*(w_b(1,1) + w_b(3,1) + w_b(4,1) + w_b(5,1) + w_b(6,1))-b(3)*(w_b(2,1) + w_b(1,1) + w_b(4,1) + w_b(5,1) + w_b(6,1))-b(4)*(w_b(2,1) + w_b(3,1) + w_b(1,1) + w_b(5,1) + w_b(6,1))-b(5)*(w_b(2,1) + w_b(3,1) + w_b(4,1) + w_b(1,1) + w_b(6,1))-b(6)*(w_b(2,1) + w_b(3,1) + w_b(4,1) + w_b(5,1) + w_b(1,1));
wsp_b(6) = b(1)+b(2)+b(3)+b(4)+b(5)+b(6);

fprintf("W(x) =%f x^5 + %f x^4 + %f x^3 + %f x^2 + %f x + %f\n",wsp_b(6),wsp_b(5),wsp_b(4),wsp_b(3),wsp_b(2),wsp_b(1));

x = [-5:0.5:5];
y = zeros(1,21);
for i=1:6
  y+=wsp_b(i)*x.^(i-1);
endfor
plot(x,y);
grid on;
hold on;

vector_x=[w_b(1,1),w_b(2,1),w_b(3,1),w_b(4,1),w_b(5,1),w_b(6,1)];
vector_y=[0,0,0,0,0,0];
for i=1:6
 for j=1:6
 vector_y(1,j) = vector_y(1,j)+wsp_b(i)*w_b(j,1)^(i-1);
 endfor
endfor
plot(vector_x,vector_y,'rx');

for i=1:6
 plot(w_b(i,1),w_b(i,2),'--gs');
endfor

title("Interpolacja Lagrange'a");
ylabel("Os y");
xlabel("Os x");